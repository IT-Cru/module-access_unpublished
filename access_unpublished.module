<?php
/**
 * @file
 * Contains
 */


/**
 * Implements hook_entity_access().
 */
function access_unpublished_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {

  $tokenKey = \Drupal::config('access_unpublished.settings')->get('hash_key');

  if (
    $operation == 'view' &&
    \Drupal::request()->query->has($tokenKey) &&
    $entity->getEntityTypeId() == 'node' &&
    $account->hasPermission('access_unpublished node ' . $entity->bundle()) &&
    !$entity->status->value
  ) {

    $query = \Drupal::entityQuery('access_token');
    $tokens = $query->condition('entity_type', $entity->getEntityType()->id())
      ->condition('entity_id', $entity->id())
      ->condition('value', \Drupal::request()->get($tokenKey))
      ->execute();

    if ($tokens) {

      $token = \Drupal::entityTypeManager()
        ->getStorage('access_token')
        ->load(current($tokens));

      if (!$token->isExpired()) {
        return \Drupal\Core\Access\AccessResult::allowed()
          ->cachePerPermissions()
          ->setCacheMaxAge($token->get('expire')->value - REQUEST_TIME);

      }

    }
  }
  return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Implements hook_form_alter().
 */
function access_unpublished_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

  if (strpos($form['#form_id'], 'node_article_edit_form') !== FALSE) {

    /** @var \Drupal\Core\Entity\Entity $entity */
    $entity = $form_state->getFormObject()->getEntity();

    if ($entity->status->value) {
      return;
    }

    $storage = \Drupal::entityTypeManager()->getStorage('access_token');

    $query = $storage->getQuery();
    $tokens = $query->condition('entity_type', $entity->getEntityType()->id())
      ->condition('entity_id', $entity->id())
      ->execute();

    $form['#attached']['library'][] = 'access_unpublished/drupal.access_unpublished.admin';

    // Create the group for the fields.
    $form['access_unpublished_settings'] = array(
      '#type' => 'details',
      '#title' => t('Temporary unpublished access'),
      '#open' => !empty($tokens),
      '#weight' => 35,
      '#attributes' => array(
        'class' => array('access-unpublished-form'),
      ),
      '#optional' => FALSE,
    );

    $form['access_unpublished_settings']['#group'] = 'advanced';

    if ($tokens) {

      /** @var \Drupal\access_unpublished\Entity\AccessToken[] $tokens */
      $tokens = $storage->loadMultiple($tokens);

      $form['access_unpublished_settings']['token_table'] = array(
        '#type' => 'table',
        '#header' => array(
          t('Valid'),
          t('Link'),
          t('Expire date'),
          t('Operations'),
        ),
      );

      $tokenKey = \Drupal::config('access_unpublished.settings')
        ->get('hash_key');

      foreach ($tokens as $id => $token) {

        $form['access_unpublished_settings']['token_table'][$id]['expired'] = array(
          '#type' => 'checkbox',
          '#default_value' => !$token->isExpired(),
          '#disabled' => TRUE
        );


        $url = \Drupal\Core\Url::fromRoute(
          'entity.' . $entity->getEntityType()->id() . '.canonical',
          [
            $entity->getEntityType()->id() => $entity->id(),
            $tokenKey => $token->get('value')->value
          ],
          [
            'absolute' => TRUE,
          ])->toString();

        $form['access_unpublished_settings']['token_table'][$id]['link'] = array(
          '#type' => 'button',
          '#value' => t('Copy to clipboard'),
          '#attributes' => [
            'data-clipboard-text' => $url,
            'class' => ['clipboard-button']
          ],
        );
        $form['access_unpublished_settings']['token_table'][$id]['expire_date'] = array(
          '#plain_text' => $token->get('expire')->value > 0 ? format_date($token->get('expire')->value) : t('Unlimited'),
        );
        $form['access_unpublished_settings']['token_table'][$id]['operations'] = array(
          '#type' => 'operations',
          '#links' => array(),
        );

        if ($token->isExpired()) {
          $form['access_unpublished_settings']['token_table'][$id]['operations']['#links']['renew'] = array(
            'title' => t('Renew'),
            'url' => \Drupal\Core\Url::fromRoute('access_unpublished.access_token_controller_renew', array('id' => $id)),
          );
        }
        else {
          $form['access_unpublished_settings']['token_table'][$id]['operations']['#links']['delete'] = array(
            'title' => t('Delete'),
            'url' => \Drupal\Core\Url::fromRoute('access_unpublished.access_token_controller_delete', array('id' => $id)),
          );
        }
      }
    }

    $duration = \Drupal::config('access_unpublished.settings')->get('duration');

    $form['access_unpublished_settings']['duration'] = [
      '#type' => 'select',
      '#title' => t('Lifetime'),
      '#options' => [
        86400 => t('@days Days', ['@days' => 1]),
        172800 => t('@days Days', ['@days' => 2]),
        345600 => t('@days Days', ['@days' => 4]),
        604800 => t('@days Days', ['@days' => 7]),
        1209600 => t('@days Days', ['@days' => 14]),
        -1 => t('Unlimited'),
      ],
      '#default_value' => $duration,
    ];

    $form['access_unpublished_settings']['generate_token'] = array(
      '#type' => 'submit',
      '#value' => t('Generate token'),
      '#submit' => ['access_unpublished_generate_token'],
    );
  }
}

function access_unpublished_generate_token(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

  /** @var \Drupal\Core\Entity\Entity $entity */
  $entity = $form_state->getFormObject()->getEntity();
  \Drupal::entityTypeManager()->getStorage('access_token')->create(
    [
      'entity_type' => $entity->getEntityType()->id(),
      'entity_id' => $entity->id(),
      'expire' => $form_state->getValue('duration') > 0 ? REQUEST_TIME + $form_state->getValue('duration') : -1,
    ]
  )->save();

  $form_state->setRebuild();
}
